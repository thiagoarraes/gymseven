#!/bin/bash
set -e

echo "üöÄ INICIANDO DEPLOY GYMSEVEN"
echo "=================================="

# 1. Fazer backup do .env FORA do diret√≥rio do projeto
echo "1. Fazendo backup das configura√ß√µes..."
cp .env /tmp/.env.gymseven.backup

# 2. Fazer pull das altera√ß√µes
echo "2. Baixando atualiza√ß√µes do GitHub..."
git fetch origin
git reset --hard origin/main
git pull origin main

# 3. Restaurar .env e verificar vari√°veis cr√≠ticas
echo "3. Restaurando configura√ß√µes..."
cp /tmp/.env.gymseven.backup .env

# 4. ADICIONAR FEATURE FLAGS V2 (CR√çTICO PARA FUNCIONAMENTO)
echo "4. Adicionando feature flags V2 ao .env..."
# Remover flags antigas se existirem
grep -v "^FEATURE_NEW_" .env > /tmp/.env.temp || true
mv /tmp/.env.temp .env

# Adicionar as novas feature flags
echo "" >> .env
echo "# Feature Flags V2 - API Functionality" >> .env
echo "FEATURE_NEW_AUTH=true" >> .env
echo "FEATURE_NEW_EXERCISES=true" >> .env
echo "FEATURE_NEW_WORKOUTS=true" >> .env
echo "FEATURE_NEW_PROGRESS=true" >> .env

echo "‚úÖ Feature flags V2 adicionadas ao .env"

# 5. Verificar se as vari√°veis cr√≠ticas est√£o no .env
echo "5. Verificando vari√°veis de ambiente cr√≠ticas..."
if ! grep -q "VITE_SUPABASE_URL" .env; then
    echo "‚ùå ERRO: VITE_SUPABASE_URL n√£o encontrada no .env"
    echo "Conte√∫do atual do .env:"
    cat .env
    exit 1
fi

if ! grep -q "VITE_SUPABASE_ANON_KEY" .env; then
    echo "‚ùå ERRO: VITE_SUPABASE_ANON_KEY n√£o encontrada no .env"
    exit 1
fi

if ! grep -q "FEATURE_NEW_WORKOUTS=true" .env; then
    echo "‚ùå ERRO: Feature flags V2 n√£o foram adicionadas corretamente"
    exit 1
fi

echo "‚úÖ Vari√°veis cr√≠ticas do Supabase e Feature flags V2 encontradas no .env"

# 6. Instalar novas depend√™ncias (se houver)
echo "6. Verificando depend√™ncias..."
npm install --no-optional

# 7. Limpar builds anteriores
echo "7. Limpando builds anteriores..."
rm -rf dist/

# 8. Fazer novo build
echo "8. Compilando aplica√ß√£o..."
npx vite build
npx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist

# 9. Verificar se build foi bem-sucedido
echo "9. Verificando integridade do build..."
if [ ! -f "dist/public/index.html" ]; then
    echo "‚ùå ERRO: Build do frontend falhou - dist/public/index.html n√£o encontrado"
    exit 1
fi

if [ ! -f "dist/index.js" ]; then
    echo "‚ùå ERRO: Build do servidor falhou - dist/index.js n√£o encontrado"
    exit 1
fi

echo "‚úÖ Build verificado com sucesso"

# 10. Fazer backup dos uploads (se existirem)
echo "10. Fazendo backup de arquivos de usu√°rio..."
if [ -d "uploads" ]; then
    cp -r uploads /tmp/uploads.gymseven.backup
    echo "‚úÖ Backup de uploads realizado"
fi

# 11. PARAR o PM2 antes do teste (CORRE√á√ÉO PRINCIPAL)
echo "11. Parando aplica√ß√£o para teste seguro..."
pm2 stop gymseven || echo "‚ö†Ô∏è  Aplica√ß√£o n√£o estava rodando"

# 12. Testar se build funciona localmente (agora com porta livre)
echo "12. Testando build antes do restart..."
# Carregar vari√°veis do .env (mesmo ambiente que PM2 usar√°)
set -a
source .env
set +a
export NODE_ENV=production

echo "üîç Verificando feature flags carregadas:"
echo "FEATURE_NEW_WORKOUTS: $FEATURE_NEW_WORKOUTS"
echo "FEATURE_NEW_EXERCISES: $FEATURE_NEW_EXERCISES"
echo "FEATURE_NEW_AUTH: $FEATURE_NEW_AUTH"
echo "FEATURE_NEW_PROGRESS: $FEATURE_NEW_PROGRESS"

# Teste com timeout e em background para n√£o travar
timeout 15s node dist/index.js > /tmp/test-build.log 2>&1 &
TEST_PID=$!

# Aguardar um pouco para o servidor subir
sleep 5

# Verificar se o processo ainda est√° rodando (sucesso)
if kill -0 $TEST_PID 2>/dev/null; then
    echo "‚úÖ Build testado com sucesso"
    # Verificar se as rotas V2 est√£o funcionando no teste
    sleep 2
    if curl -f -s "http://localhost:5000/api/v2/health" | grep -q "API v2 is running"; then
        echo "‚úÖ API V2 verificada e funcionando no teste"
    else
        echo "‚ö†Ô∏è  API V2 n√£o respondeu conforme esperado no teste"
        echo "Logs do teste:"
        tail -20 /tmp/test-build.log
    fi
    
    # Matar o processo de teste
    kill $TEST_PID 2>/dev/null || true
    wait $TEST_PID 2>/dev/null || true
else
    echo "‚ùå ERRO: Build falhou no teste local"
    echo "Logs do teste:"
    cat /tmp/test-build.log
    exit 1
fi

# 13. Reiniciar aplica√ß√£o
echo "13. Reiniciando aplica√ß√£o..."
pm2 start gymseven || pm2 restart gymseven

# 14. Aguardar inicializa√ß√£o
echo "14. Aguardando inicializa√ß√£o..."
sleep 5

# 15. Verificar se est√° funcionando
echo "15. Verificando status da aplica√ß√£o..."
pm2 status gymseven

# Mostrar logs recentes se houver erro
echo "16. Verificando logs iniciais..."
pm2 logs gymseven --lines 5 --nostream

# 17. Teste mais robusto da aplica√ß√£o incluindo API V2
echo "17. Testando conectividade e API V2..."
for i in {1..5}; do
    if curl -f -s http://localhost:5000 > /dev/null; then
        echo "‚úÖ Aplica√ß√£o respondendo corretamente"
        
        # Testar especificamente as rotas V2
        sleep 2
        if curl -f -s "http://localhost:5000/api/v2/health" | grep -q "API v2 is running"; then
            echo "‚úÖ API V2 confirmada funcionando em produ√ß√£o"
            break
        else
            echo "‚ö†Ô∏è  API V2 n√£o est√° respondendo - tentando novamente..."
        fi
    else
        echo "‚è≥ Tentativa $i/5 - Aguardando aplica√ß√£o..."
        sleep 3
    fi
    
    if [ $i -eq 5 ]; then
        echo "‚ùå ERRO: Aplica√ß√£o ou API V2 n√£o est√° funcionando ap√≥s 5 tentativas"
        echo "Logs completos do PM2:"
        pm2 logs gymseven --lines 50 --nostream
        echo "\nStatus do PM2:"
        pm2 show gymseven
        echo "\nVari√°veis de ambiente cr√≠ticas:"
        pm2 show gymseven | grep -A 20 "env:" || true
        echo "\nTestando API V2 diretamente:"
        curl -v "http://localhost:5000/api/v2/health" || true
        exit 1
    fi
done

# 18. Restaurar uploads se backup existir
echo "18. Restaurando arquivos de usu√°rio..."
if [ -d "/tmp/uploads.gymseven.backup" ]; then
    cp -r /tmp/uploads.gymseven.backup/* uploads/ 2>/dev/null || true
    echo "‚úÖ Uploads restaurados"
fi

# 19. Limpeza de arquivos tempor√°rios
echo "19. Limpeza final..."
rm -f /tmp/.env.gymseven.backup
rm -rf /tmp/uploads.gymseven.backup
rm -f /tmp/test-build.log

echo ""
echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
echo "=================================="
echo "‚úÖ Aplica√ß√£o atualizada e rodando em: http://147.93.35.192"
echo "‚úÖ API V2 ativada com feature flags"
echo "‚úÖ Rotas de exerc√≠cios e treinos funcionando"
echo ""
echo "Para verificar:"
echo "- Logs: pm2 logs gymseven"
echo "- Status: pm2 status"  
echo "- API V2: curl http://localhost:5000/api/v2/health"
echo ""
echo "Teste agora em gymseven.com.br:"
echo "- Cria√ß√£o de exerc√≠cios ‚úÖ"
echo "- Visualiza√ß√£o de treinos ‚úÖ"