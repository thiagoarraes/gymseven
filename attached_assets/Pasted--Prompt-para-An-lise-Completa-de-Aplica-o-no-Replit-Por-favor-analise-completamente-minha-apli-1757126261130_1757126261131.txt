# Prompt para An√°lise Completa de Aplica√ß√£o no Replit

Por favor, analise completamente minha aplica√ß√£o no Replit e identifique/corrija todos os erros encontrados. Realize uma auditoria detalhada dos seguintes componentes:

## 1. ESTRUTURA E ARQUIVOS
- [ ] Examine a estrutura de pastas e organiza√ß√£o do projeto
- [ ] Verifique arquivos de configura√ß√£o (package.json, requirements.txt, etc.)
- [ ] Analise imports/exports e depend√™ncias
- [ ] Identifique arquivos desnecess√°rios ou faltantes

## 2. API E ENDPOINTS
- [ ] **Rotas e Endpoints**: Verifique se todas as rotas est√£o funcionando
- [ ] **M√©todos HTTP**: Confirme GET, POST, PUT, DELETE est√£o implementados corretamente
- [ ] **Valida√ß√£o de dados**: Analise valida√ß√£o de entrada e sa√≠da
- [ ] **Tratamento de erros**: Verifique se h√° handling adequado de erros
- [ ] **Middleware**: Examine autentica√ß√£o, CORS, rate limiting
- [ ] **Status codes**: Confirme c√≥digos de resposta HTTP apropriados

## 3. CONEX√ÉO COM SUPABASE
- [ ] **Configura√ß√£o**: Verifique URL, API Key e configura√ß√µes de conex√£o
- [ ] **Autentica√ß√£o**: Teste login, logout, registro de usu√°rios
- [ ] **Pol√≠ticas RLS**: Analise Row Level Security policies
- [ ] **Conex√£o segura**: Verifique se as credenciais est√£o protegidas

## 4. BANCO DE DADOS E TABELAS
- [ ] **Estrutura das tabelas**: Analise esquema, tipos de dados, constraints
- [ ] **Relacionamentos**: Verifique foreign keys e joins
- [ ] **√çndices**: Confirme se existem √≠ndices necess√°rios para performance
- [ ] **Triggers e Functions**: Teste fun√ß√µes do banco se existirem
- [ ] **Migrations**: Verifique se estrutura est√° atualizada

## 5. OPERA√á√ïES CRUD
- [ ] **CREATE**: Teste inser√ß√£o de novos registros
- [ ] **READ**: Verifique consultas e filtros
- [ ] **UPDATE**: Teste atualiza√ß√µes de dados existentes
- [ ] **DELETE**: Confirme remo√ß√£o segura de registros
- [ ] **Transa√ß√µes**: Analise integridade das opera√ß√µes

## 6. FRONTEND (SE APLIC√ÅVEL)
- [ ] **Interface**: Teste todos os componentes da UI
- [ ] **Formul√°rios**: Verifique valida√ß√£o e submiss√£o
- [ ] **Estados**: Analise gerenciamento de estado da aplica√ß√£o
- [ ] **Navega√ß√£o**: Teste rotas e navega√ß√£o entre p√°ginas

## 7. SEGURAN√áA
- [ ] **Autentica√ß√£o**: Verifique sistemas de login/logout
- [ ] **Autoriza√ß√£o**: Confirme controle de acesso por usu√°rio/papel
- [ ] **Sanitiza√ß√£o**: Analise prote√ß√£o contra SQL injection e XSS
- [ ] **Vari√°veis de ambiente**: Verifique se dados sens√≠veis est√£o protegidos

## 8. PERFORMANCE E OTIMIZA√á√ÉO
- [ ] **Queries**: Analise efici√™ncia das consultas ao banco
- [ ] **Caching**: Verifique implementa√ß√£o de cache se existir
- [ ] **Otimiza√ß√£o**: Identifique gargalos de performance
- [ ] **Logs**: Analise sistema de logging para debug

## 9. TESTES E VALIDA√á√ÉO
- [ ] **Teste funcional**: Execute todas as funcionalidades principais
- [ ] **Casos extremos**: Teste com dados inv√°lidos ou extremos
- [ ] **Load testing**: Verifique comportamento sob carga (se relevante)
- [ ] **Cross-browser**: Teste compatibilidade (se web app)

## 10. DOCUMENTA√á√ÉO E MANUTENIBILIDADE
- [ ] **README**: Verifique instru√ß√µes de instala√ß√£o e uso
- [ ] **Coment√°rios**: Analise documenta√ß√£o no c√≥digo
- [ ] **Versionamento**: Confirme estrutura para controle de vers√µes

## FORMATO DE RESPOSTA ESPERADO:

Para cada item analisado, forne√ßa:

### ‚úÖ FUNCIONANDO CORRETAMENTE
- Liste o que est√° funcionando bem

### ‚ùå PROBLEMAS ENCONTRADOS
- **Problema**: Descri√ß√£o detalhada
- **Severidade**: Cr√≠tico/Alto/M√©dio/Baixo
- **Local**: Arquivo e linha espec√≠fica
- **Impacto**: Como afeta a aplica√ß√£o

### üîß CORRE√á√ïES APLICADAS
- **Antes**: C√≥digo/configura√ß√£o original
- **Depois**: C√≥digo/configura√ß√£o corrigida
- **Explica√ß√£o**: Por que a mudan√ßa foi necess√°ria

### üìã RECOMENDA√á√ïES
- Melhorias de seguran√ßa
- Otimiza√ß√µes de performance
- Boas pr√°ticas a implementar
- Pr√≥ximos passos sugeridos

## PRIORIZA√á√ÉO
Ordene os problemas por:
1. **Cr√≠ticos**: Quebram funcionalidade principal
2. **Altos**: Afetam seguran√ßa ou experi√™ncia do usu√°rio
3. **M√©dios**: Impactam performance ou manutenibilidade
4. **Baixos**: Melhorias cosm√©ticas ou de organiza√ß√£o

Por favor, seja espec√≠fico e detalhado em sua an√°lise, fornecendo solu√ß√µes pr√°ticas para cada problema identificado.