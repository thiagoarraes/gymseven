import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

async function addUserIsolation() {
  console.log('üîß Adicionando isolamento de usu√°rio √†s tabelas...\n');
  
  try {
    // Add userId column to exercises table
    console.log('1. Adicionando user_id √† tabela exercises...');
    const { error: exercisesError } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE exercises ADD COLUMN IF NOT EXISTS user_id VARCHAR REFERENCES users(id) ON DELETE CASCADE;'
    });
    
    if (exercisesError) {
      console.log('‚ö†Ô∏è  Coluna user_id j√° existe ou erro:', exercisesError.message);
    } else {
      console.log('‚úÖ Coluna user_id adicionada √† exercises');
    }

    // Add userId column to workout_templates table  
    console.log('2. Adicionando user_id √† tabela workoutTemplates...');
    const { error: templatesError } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE "workoutTemplates" ADD COLUMN IF NOT EXISTS user_id VARCHAR REFERENCES users(id) ON DELETE CASCADE;'
    });
    
    if (templatesError) {
      console.log('‚ö†Ô∏è  Coluna user_id j√° existe ou erro:', templatesError.message);
    } else {
      console.log('‚úÖ Coluna user_id adicionada √† workoutTemplates');
    }

    // Add userId column to workout_logs table
    console.log('3. Adicionando user_id √† tabela workoutLogs...');
    const { error: logsError } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE "workoutLogs" ADD COLUMN IF NOT EXISTS user_id VARCHAR REFERENCES users(id) ON DELETE CASCADE;'
    });
    
    if (logsError) {
      console.log('‚ö†Ô∏è  Coluna user_id j√° existe ou erro:', logsError.message);
    } else {
      console.log('‚úÖ Coluna user_id adicionada √† workoutLogs');
    }

    // Get first user ID
    console.log('4. Buscando primeiro usu√°rio...');
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id')
      .limit(1);
    
    if (usersError || !users || users.length === 0) {
      console.log('‚ùå Nenhum usu√°rio encontrado');
      return;
    }
    
    const firstUserId = users[0].id;
    console.log(`üë§ Primeiro usu√°rio encontrado: ${firstUserId}`);

    // Update existing exercises
    console.log('5. Atualizando exerc√≠cios existentes...');
    const { error: updateExercisesError } = await supabase
      .from('exercises')
      .update({ user_id: firstUserId })
      .is('user_id', null);
    
    if (updateExercisesError) {
      console.log('‚ö†Ô∏è  Erro ao atualizar exerc√≠cios:', updateExercisesError.message);
    } else {
      console.log('‚úÖ Exerc√≠cios atualizados');
    }

    // Update existing workout templates
    console.log('6. Atualizando templates existentes...');
    const { error: updateTemplatesError } = await supabase
      .from('workoutTemplates')
      .update({ user_id: firstUserId })
      .is('user_id', null);
    
    if (updateTemplatesError) {
      console.log('‚ö†Ô∏è  Erro ao atualizar templates:', updateTemplatesError.message);
    } else {
      console.log('‚úÖ Templates atualizados');
    }

    // Update existing workout logs
    console.log('7. Atualizando logs existentes...');
    const { error: updateLogsError } = await supabase
      .from('workoutLogs')
      .update({ user_id: firstUserId })
      .is('user_id', null);
    
    if (updateLogsError) {
      console.log('‚ö†Ô∏è  Erro ao atualizar logs:', updateLogsError.message);
    } else {
      console.log('‚úÖ Logs atualizados');
    }

    console.log('\nüéâ Isolamento de usu√°rio configurado com sucesso!');
    console.log('üìù Todos os dados existentes foram atribu√≠dos ao primeiro usu√°rio.');
    console.log('üîí Novos dados ser√£o automaticamente isolados por usu√°rio.');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

addUserIsolation();