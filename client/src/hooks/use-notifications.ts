import { useEffect, useState } from 'react';
import { useToast } from './use-toast';
import { useSoundEffects } from './use-sound-effects';

export interface NotificationOptions {
  title: string;
  body: string;
  icon?: string;
  tag?: string;
  requireInteraction?: boolean;
  actions?: { action: string; title: string }[];
}

export interface NotificationSupportStatus {
  isSupported: boolean;
  isIOS: boolean;
  isPWA: boolean;
  hasPushManager: boolean;
  hasServiceWorker: boolean;
  hasNotificationAPI: boolean;
  iOSVersion?: number;
  reason?: string;
  instructions?: string[];
}

export function useNotifications() {
  const [permission, setPermission] = useState<NotificationPermission>('default');
  const [supportStatus, setSupportStatus] = useState<NotificationSupportStatus>({
    isSupported: false,
    isIOS: false,
    isPWA: false,
    hasPushManager: false,
    hasServiceWorker: false,
    hasNotificationAPI: false
  });
  const [registration, setRegistration] = useState<ServiceWorkerRegistration | null>(null);
  const { toast } = useToast();
  const soundEffects = useSoundEffects();

  // Fun√ß√£o avan√ßada de detec√ß√£o de suporte para iOS/PWA
  const detectNotificationSupport = (): NotificationSupportStatus => {
    const userAgent = navigator.userAgent;
    const isIOS = /iPad|iPhone|iPod/.test(userAgent);
    const isPWA = window.matchMedia('(display-mode: standalone)').matches ||
                  (window.navigator as any).standalone === true ||
                  document.referrer.includes('android-app://');
    const hasPushManager = 'PushManager' in window;
    const hasServiceWorker = 'serviceWorker' in navigator;
    const hasNotificationAPI = 'Notification' in window;
    
    let iOSVersion: number | undefined;
    if (isIOS) {
      const match = userAgent.match(/OS (\d+)_/);
      if (match) {
        iOSVersion = parseInt(match[1]);
      }
    }
    
    let reason = '';
    let instructions: string[] = [];
    let isSupported = false;
    
    if (isIOS) {
      // iOS espec√≠fico - precisa ser PWA instalada
      if (!iOSVersion || iOSVersion < 16) {
        reason = 'iOS muito antigo. √â necess√°rio iOS 16.4 ou superior.';
        instructions = ['Atualize seu iPhone para iOS 16.4 ou superior'];
      } else if (!isPWA) {
        reason = 'App n√£o est√° instalado como PWA.';
        instructions = [
          'No Safari, toque no bot√£o Compartilhar (quadrado com seta)',
          'Selecione "Adicionar √† Tela de In√≠cio"',
          'Confirme a instala√ß√£o',
          'Abra o app pela tela inicial (n√£o pelo Safari)',
          'Volte aqui e ative as notifica√ß√µes'
        ];
      } else if (!hasPushManager) {
        reason = 'Push API n√£o est√° habilitada no Safari.';
        instructions = [
          'Abra Configura√ß√µes do iPhone',
          'V√° em Safari > Avan√ßado > Recursos Experimentais', 
          'Ative "Push API"',
          'Volte ao app e tente novamente'
        ];
      } else if (!hasServiceWorker || !hasNotificationAPI) {
        reason = 'Recursos necess√°rios n√£o dispon√≠veis.';
        instructions = ['Verifique se est√° usando a vers√£o mais recente do Safari'];
      } else {
        isSupported = true;
      }
    } else {
      // Android/Desktop - verifica√ß√£o padr√£o
      if (!hasNotificationAPI) {
        reason = 'Seu navegador n√£o suporta notifica√ß√µes.';
        instructions = ['Use um navegador moderno como Chrome, Firefox ou Edge'];
      } else if (!hasServiceWorker) {
        reason = 'Service Worker n√£o suportado.';
        instructions = ['Atualize seu navegador para uma vers√£o mais recente'];
      } else {
        isSupported = true;
      }
    }
    
    return {
      isSupported,
      isIOS,
      isPWA,
      hasPushManager,
      hasServiceWorker,
      hasNotificationAPI,
      iOSVersion,
      reason,
      instructions
    };
  };

  useEffect(() => {
    // Detectar suporte avan√ßado a notifica√ß√µes
    const status = detectNotificationSupport();
    setSupportStatus(status);
    
    if (status.hasNotificationAPI) {
      setPermission(Notification.permission);
    }
    
    console.log('üîç [NOTIFICATION SUPPORT]', status);
  }, []);

  // Solicitar permiss√£o para notifica√ß√µes
  const requestPermission = async (): Promise<boolean> => {
    if (!supportStatus.isSupported) {
      toast({
        title: "Notifica√ß√µes n√£o suportadas",
        description: supportStatus.reason || "Seu navegador n√£o suporta notifica√ß√µes push.",
        variant: "destructive"
      });
      return false;
    }

    try {
      const result = await Notification.requestPermission();
      setPermission(result);
      
      if (result === 'granted') {
        toast({
          title: "Notifica√ß√µes ativadas!",
          description: "Voc√™ receber√° alertas sobre seus treinos.",
        });
        return true;
      } else {
        toast({
          title: "Permiss√£o negada",
          description: "Ative as notifica√ß√µes nas configura√ß√µes do navegador.",
          variant: "destructive"
        });
        return false;
      }
    } catch (error) {
      console.error('Erro ao solicitar permiss√£o:', error);
      toast({
        title: "Erro nas notifica√ß√µes",
        description: "N√£o foi poss√≠vel configurar as notifica√ß√µes.",
        variant: "destructive"
      });
      return false;
    }
  };

  // Inicializar service worker automaticamente
  useEffect(() => {
    if (supportStatus.isSupported && supportStatus.hasServiceWorker) {
      navigator.serviceWorker.register('/sw.js')
        .then((reg) => {
          setRegistration(reg);
          console.log('Service Worker registrado automaticamente:', reg);
        })
        .catch((error) => {
          console.error('Erro ao registrar Service Worker:', error);
        });
    }
  }, [supportStatus.isSupported, supportStatus.hasServiceWorker]);

  // Enviar notifica√ß√£o local
  const sendNotification = async (options: NotificationOptions) => {
    if (permission !== 'granted') {
      console.warn('‚ö†Ô∏è [NOTIFICATION] Permiss√£o de notifica√ß√£o n√£o concedida');
      return false;
    }

    try {
      // Verificar se as prefer√™ncias do usu√°rio permitem notifica√ß√µes
      const userPreferences = localStorage.getItem('userPreferences');
      if (userPreferences) {
        const prefs = JSON.parse(userPreferences);
        if (!prefs.notifications) {
          console.log('Notifica√ß√µes desabilitadas pelo usu√°rio');
          return false;
        }
      }

      // Se temos service worker, usar ele
      if (registration) {
        await registration.showNotification(options.title, {
          body: options.body,
          icon: options.icon || '/favicon.ico',
          badge: '/favicon.ico',
          tag: options.tag || 'gymseven-notification',
          requireInteraction: options.requireInteraction || false,
          actions: options.actions || [],
          data: { timestamp: Date.now() },
          ...('vibrate' in navigator && { vibrate: [200, 100, 200] })
        } as any);
      } else {
        // Fallback para notifica√ß√£o simples
        new Notification(options.title, {
          body: options.body,
          icon: options.icon || '/favicon.ico',
          tag: options.tag || 'gymseven-notification',
        });
      }
      
      return true;
    } catch (error) {
      console.error('‚ùå [NOTIFICATION ERROR] Erro ao enviar notifica√ß√£o:', error);
      return false;
    }
  };

  // Notifica√ß√µes espec√≠ficas do GymSeven
  const notifyRestComplete = () => {
    soundEffects.playRestComplete();
    sendNotification({
      title: '‚è∞ Descanso finalizado!',
      body: 'Hora de continuar seu treino. Vamos l√°!',
      tag: 'rest-complete',
      requireInteraction: true,
    });
  };

  const notifyWorkoutStart = (workoutName: string) => {
    soundEffects.playWorkoutStart();
    sendNotification({
      title: 'üí™ Treino iniciado!',
      body: `Bom treino de ${workoutName}. Foque e d√™ o seu melhor!`,
      tag: 'workout-start',
    });
  };

  const notifyWorkoutComplete = (workoutName: string, duration: string) => {
    soundEffects.playWorkoutComplete();
    sendNotification({
      title: 'üéâ Treino conclu√≠do!',
      body: `Parab√©ns! Voc√™ finalizou ${workoutName} em ${duration}.`,
      tag: 'workout-complete',
      requireInteraction: true,
    });
  };

  const notifyPersonalRecord = (exercise: string) => {
    soundEffects.playPersonalRecord();
    sendNotification({
      title: 'üî• Novo recorde pessoal!',
      body: `Voc√™ quebrou seu recorde em ${exercise}. Incr√≠vel!`,
      tag: 'personal-record',
      requireInteraction: true,
    });
  };

  // Fun√ß√£o para recarregar detec√ß√£o de suporte
  const refreshSupport = () => {
    console.log('üîÑ [REFRESH] Recarregando detec√ß√£o de suporte...');
    const newStatus = detectNotificationSupport();
    setSupportStatus(newStatus);
    
    if (newStatus.hasNotificationAPI) {
      setPermission(Notification.permission);
    }
    
    console.log('‚úÖ [REFRESH] Detec√ß√£o atualizada:', newStatus);
  };

  return {
    permission,
    isSupported: supportStatus.isSupported,
    supportStatus,
    requestPermission,
    sendNotification,
    notifyRestComplete,
    notifyWorkoutStart,
    notifyWorkoutComplete,
    notifyPersonalRecord,
    soundEffects,
    refreshSupport,
  };
}