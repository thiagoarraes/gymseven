#!/bin/bash
set -e

echo "üöÄ INICIANDO DEPLOY GYMSEVEN"
echo "=================================="

# 1. Fazer backup do .env FORA do diret√≥rio do projeto
echo "1. Fazendo backup das configura√ß√µes..."
cp .env /tmp/.env.gymseven.backup

# 2. Fazer pull das altera√ß√µes
echo "2. Baixando atualiza√ß√µes do GitHub..."
git fetch origin
git reset --hard origin/main
git pull origin main

# 3. Restaurar .env e verificar vari√°veis cr√≠ticas
echo "3. Restaurando configura√ß√µes..."
cp /tmp/.env.gymseven.backup .env

# Verificar se as vari√°veis cr√≠ticas est√£o no .env
echo "4. Verificando vari√°veis de ambiente cr√≠ticas..."
if ! grep -q "VITE_SUPABASE_URL" .env; then
    echo "‚ùå ERRO: VITE_SUPABASE_URL n√£o encontrada no .env"
    echo "Conte√∫do atual do .env:"
    cat .env
    exit 1
fi

if ! grep -q "VITE_SUPABASE_ANON_KEY" .env; then
    echo "‚ùå ERRO: VITE_SUPABASE_ANON_KEY n√£o encontrada no .env"
    exit 1
fi

echo "‚úÖ Vari√°veis cr√≠ticas do Supabase encontradas no .env"

# 5. Instalar novas depend√™ncias (se houver)
echo "5. Verificando depend√™ncias..."
npm install --no-optional

# 6. Limpar builds anteriores
echo "6. Limpando builds anteriores..."
rm -rf dist/

# 7. Fazer novo build
echo "7. Compilando aplica√ß√£o..."
npx vite build
npx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist

# 8. Verificar se build foi bem-sucedido
echo "8. Verificando integridade do build..."
if [ ! -f "dist/public/index.html" ]; then
    echo "‚ùå ERRO: Build do frontend falhou - dist/public/index.html n√£o encontrado"
    exit 1
fi

if [ ! -f "dist/index.js" ]; then
    echo "‚ùå ERRO: Build do servidor falhou - dist/index.js n√£o encontrado"
    exit 1
fi

echo "‚úÖ Build verificado com sucesso"

# 9. Fazer backup dos uploads (se existirem)
echo "9. Fazendo backup de arquivos de usu√°rio..."
if [ -d "uploads" ]; then
    cp -r uploads /tmp/uploads.gymseven.backup
    echo "‚úÖ Backup de uploads realizado"
fi

# 10. Testar se build funciona localmente
echo "10. Testando build antes do restart..."
export NODE_ENV=production
if ! timeout 10s node dist/index.js > /tmp/test-build.log 2>&1; then
    echo "‚ùå ERRO: Build falhou no teste local"
    echo "Logs do teste:"
    cat /tmp/test-build.log
    exit 1
fi

echo "‚úÖ Build testado com sucesso"

# 11. Reiniciar aplica√ß√£o
echo "11. Reiniciando aplica√ß√£o..."
pm2 restart gymseven

# 12. Aguardar inicializa√ß√£o
echo "12. Aguardando inicializa√ß√£o..."
sleep 5

# 13. Verificar se est√° funcionando
echo "13. Verificando status da aplica√ß√£o..."
pm2 status gymseven

# Mostrar logs recentes se houver erro
echo "14. Verificando logs iniciais..."
pm2 logs gymseven --lines 5 --nostream

# Teste mais robusto da aplica√ß√£o
echo "15. Testando conectividade..."
for i in {1..5}; do
    if curl -f -s http://localhost:5000 > /dev/null; then
        echo "‚úÖ Aplica√ß√£o respondendo corretamente"
        break
    else
        echo "‚è≥ Tentativa $i/5 - Aguardando aplica√ß√£o..."
        sleep 2
    fi
    
    if [ $i -eq 5 ]; then
        echo "‚ùå ERRO: Aplica√ß√£o n√£o est√° respondendo ap√≥s 5 tentativas"
        echo "Logs completos do PM2:"
        pm2 logs gymseven --lines 50 --nostream
        echo "\nStatus do PM2:"
        pm2 show gymseven
        echo "\nVari√°veis de ambiente cr√≠ticas:"
        pm2 show gymseven | grep -A 20 "env:"
        exit 1
    fi
done

# 16. Restaurar uploads se backup existir
echo "16. Restaurando arquivos de usu√°rio..."
if [ -d "/tmp/uploads.gymseven.backup" ]; then
    cp -r /tmp/uploads.gymseven.backup/* uploads/ 2>/dev/null || true
    echo "‚úÖ Uploads restaurados"
fi

# 17. Limpeza de arquivos tempor√°rios
echo "17. Limpeza final..."
rm -f /tmp/.env.gymseven.backup
rm -rf /tmp/uploads.gymseven.backup

echo ""
echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
echo "=================================="
echo "Aplica√ß√£o atualizada e rodando em: http://147.93.35.192"
echo "Para verificar logs: pm2 logs gymseven"
echo "Para verificar status: pm2 status"